

   # event vertex smearing - applies only once (internal check)
   # Note : all internal generatoes will always do (0,0,0) vertex
   #
   module VtxSmeared = VertexGenerator
   {
      string type = "IOMC/EventVertexGenerators/GaussianEventVertexGenerator"
      double MeanX = 0.
      double MeanY = 0.
      double MeanZ = 0.
      double SigmaX = 0.015
      double SigmaY = 0.015
      double SigmaZ = 53.0  // in mm (as in COBRA/OSCAR)
   }

   #Geometry
   #
   include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"

   es_module = TrackerGeometricDetESModule {}

   #Magnetic Field
   #
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

   # Step 2 : CMS Detector Simulation

   # CMS Geant4-based Det.Simulation module (OscarProducer)
   #
   include "SimG4Core/Application/data/SimG4Object.cfi"
   
   # Step 3b : Digitization of Ecal and Hcal

   # Definition of ecalDigiSequence copied from 
   # SimCalorimetry/EcalSimProducers/data/ecalDigiSequence.cff
   include "SimCalorimetry/EcalSimProducers/data/ecaldigi.cfi"

   # Selective Readout Processor producer
   include "SimCalorimetry/EcalSelectiveReadoutProducers/data/ecalDigis.cfi"

   # Preshower Zero suppression producer
   include "SimCalorimetry/EcalZeroSuppressionProducers/data/ecalPreshowerDigis.cfi"

   sequence ecalDigiSequence = { ecalUnsuppressedDigis, ecalDigis, ecalPreshowerDigis }

   
   include "SimCalorimetry/HcalSimProducers/data/hcaldigi.cfi"

   # Mixing Module is *required* to simulated Ecal/Hcal/Muon digitization !

   module mix = MixingModule
   {
#      secsource input = PoolRASource
#      {
         #
         # starting 050, you can skip secsource block at all if you don't
         # wnat to model mixing/pileup at all;
         # however, an at least "empty mixing" need to be present if you
         # want to perform Ecal/Hcal/CSC/DT digitization - those explicitely
         # require presence of CrossingFrame in the edm::Event
         #
         # alternatively, you can set averageNumber=0 if you don't want
         # to model the pileup
         #
         # to the secsource/PoolRASource, you can give just 1 file or more;
         # this files will make a "concatinated buffer", which will go circular
         # until the loop of primary events is done - thus, it'll never run out
         #
         # WARNING: you can only give miltiple files, if they're generated with
         #          identical sets of tracked parameters;
         #          for example, you canNOT give a file made with a single muon
         #          gun and a file made with a single pion gun, because PartID
         #          is a *tracked* parameter in the gun's PSet;
         #          however, you can merge together files made with other generators,
         #          for example, PythiaSource, because all parameters of it would be
         #          *untracked*
         #
#         untracked vstring fileNames =
#         {'file:/afs/cern.ch/cms/geant4rep/genntpl/muon_simhit_for_pileup.060pre1.root' }
#         string type = "poisson"
#         double averageNumber = 3  # setting this param. to 0 means "No pile-up",
#                                   # that is, digitize current crossing only
#         int32 minBunch = -3
#         int32 maxBunch = 5
#         int32 seed = 1234567
#      }
      int32 bunchspace = 25
   }

   sequence calDigi = { ecalDigiSequence & hcalDigis }
   sequence simDigi = { VtxSmeared, g4SimHits, mix, calDigi }

